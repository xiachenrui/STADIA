// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// stadia_EM_SP
Rcpp::List stadia_EM_SP(Rcpp::NumericMatrix& x, Rcpp::NumericMatrix& position, Rcpp::IntegerVector& batch_vec, Rcpp::S4& adj_mat_mnn, Rcpp::List hyper, Rcpp::List init, std::string& platform, const int& d, const int& K, const double& adj_cutoff, const int& icm_maxiter, const int& em_maxiter, const bool& verbose, const bool& verbose_icm, const int& ncores);
RcppExport SEXP _stadia_stadia_EM_SP(SEXP xSEXP, SEXP positionSEXP, SEXP batch_vecSEXP, SEXP adj_mat_mnnSEXP, SEXP hyperSEXP, SEXP initSEXP, SEXP platformSEXP, SEXP dSEXP, SEXP KSEXP, SEXP adj_cutoffSEXP, SEXP icm_maxiterSEXP, SEXP em_maxiterSEXP, SEXP verboseSEXP, SEXP verbose_icmSEXP, SEXP ncoresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type position(positionSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type batch_vec(batch_vecSEXP);
    Rcpp::traits::input_parameter< Rcpp::S4& >::type adj_mat_mnn(adj_mat_mnnSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type hyper(hyperSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type init(initSEXP);
    Rcpp::traits::input_parameter< std::string& >::type platform(platformSEXP);
    Rcpp::traits::input_parameter< const int& >::type d(dSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const double& >::type adj_cutoff(adj_cutoffSEXP);
    Rcpp::traits::input_parameter< const int& >::type icm_maxiter(icm_maxiterSEXP);
    Rcpp::traits::input_parameter< const int& >::type em_maxiter(em_maxiterSEXP);
    Rcpp::traits::input_parameter< const bool& >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const bool& >::type verbose_icm(verbose_icmSEXP);
    Rcpp::traits::input_parameter< const int& >::type ncores(ncoresSEXP);
    rcpp_result_gen = Rcpp::wrap(stadia_EM_SP(x, position, batch_vec, adj_mat_mnn, hyper, init, platform, d, K, adj_cutoff, icm_maxiter, em_maxiter, verbose, verbose_icm, ncores));
    return rcpp_result_gen;
END_RCPP
}
// calAdjacent
arma::sp_mat calAdjacent(arma::mat& position_, arma::Col<int>& batch_vec_, std::string& platform, const double& cutoff, const int& ncores);
RcppExport SEXP _stadia_calAdjacent(SEXP position_SEXP, SEXP batch_vec_SEXP, SEXP platformSEXP, SEXP cutoffSEXP, SEXP ncoresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type position_(position_SEXP);
    Rcpp::traits::input_parameter< arma::Col<int>& >::type batch_vec_(batch_vec_SEXP);
    Rcpp::traits::input_parameter< std::string& >::type platform(platformSEXP);
    Rcpp::traits::input_parameter< const double& >::type cutoff(cutoffSEXP);
    Rcpp::traits::input_parameter< const int& >::type ncores(ncoresSEXP);
    rcpp_result_gen = Rcpp::wrap(calAdjacent(position_, batch_vec_, platform, cutoff, ncores));
    return rcpp_result_gen;
END_RCPP
}
// convertSparse
arma::sp_mat convertSparse(Rcpp::S4& mat);
RcppExport SEXP _stadia_convertSparse(SEXP matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::S4& >::type mat(matSEXP);
    rcpp_result_gen = Rcpp::wrap(convertSparse(mat));
    return rcpp_result_gen;
END_RCPP
}
// update_c_sp
Rcpp::List update_c_sp(const arma::mat& x, const arma::sp_mat& adj_mat, arma::Col<int>& c_vec, const arma::mat& B, const arma::mat& L, const arma::mat& Mu, const arma::mat& T, const arma::mat& Lambda, const arma::Col<int>& batch_vec, const arma::vec& omega_vec, arma::vec& eta_vec, const int& icm_maxiter, const bool& verbose, const int& ncores);
RcppExport SEXP _stadia_update_c_sp(SEXP xSEXP, SEXP adj_matSEXP, SEXP c_vecSEXP, SEXP BSEXP, SEXP LSEXP, SEXP MuSEXP, SEXP TSEXP, SEXP LambdaSEXP, SEXP batch_vecSEXP, SEXP omega_vecSEXP, SEXP eta_vecSEXP, SEXP icm_maxiterSEXP, SEXP verboseSEXP, SEXP ncoresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type adj_mat(adj_matSEXP);
    Rcpp::traits::input_parameter< arma::Col<int>& >::type c_vec(c_vecSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type B(BSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type L(LSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Mu(MuSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type T(TSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< const arma::Col<int>& >::type batch_vec(batch_vecSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type omega_vec(omega_vecSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type eta_vec(eta_vecSEXP);
    Rcpp::traits::input_parameter< const int& >::type icm_maxiter(icm_maxiterSEXP);
    Rcpp::traits::input_parameter< const bool& >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const int& >::type ncores(ncoresSEXP);
    rcpp_result_gen = Rcpp::wrap(update_c_sp(x, adj_mat, c_vec, B, L, Mu, T, Lambda, batch_vec, omega_vec, eta_vec, icm_maxiter, verbose, ncores));
    return rcpp_result_gen;
END_RCPP
}
// update_c_sc
Rcpp::List update_c_sc(const arma::mat& x, const arma::mat& B, const arma::mat& L, const arma::mat& Mu, const arma::mat& T, const arma::mat& Lambda, const arma::Col<int>& batch_vec, const arma::vec& omega_vec, arma::mat& pk_mat, const int& ncores);
RcppExport SEXP _stadia_update_c_sc(SEXP xSEXP, SEXP BSEXP, SEXP LSEXP, SEXP MuSEXP, SEXP TSEXP, SEXP LambdaSEXP, SEXP batch_vecSEXP, SEXP omega_vecSEXP, SEXP pk_matSEXP, SEXP ncoresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type B(BSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type L(LSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Mu(MuSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type T(TSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< const arma::Col<int>& >::type batch_vec(batch_vecSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type omega_vec(omega_vecSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type pk_mat(pk_matSEXP);
    Rcpp::traits::input_parameter< const int& >::type ncores(ncoresSEXP);
    rcpp_result_gen = Rcpp::wrap(update_c_sc(x, B, L, Mu, T, Lambda, batch_vec, omega_vec, pk_mat, ncores));
    return rcpp_result_gen;
END_RCPP
}
// expect_f
Rcpp::List expect_f(const arma::mat& x, const Rcpp::List& inv_Phis_list, const arma::mat& B, const arma::mat& Lambda, const arma::mat& Mu, const arma::mat& T, const arma::mat& L, const arma::mat& S_lik, const arma::vec& omega_vec, const arma::Col<int>& batch_vec, const int& ncores);
RcppExport SEXP _stadia_expect_f(SEXP xSEXP, SEXP inv_Phis_listSEXP, SEXP BSEXP, SEXP LambdaSEXP, SEXP MuSEXP, SEXP TSEXP, SEXP LSEXP, SEXP S_likSEXP, SEXP omega_vecSEXP, SEXP batch_vecSEXP, SEXP ncoresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type inv_Phis_list(inv_Phis_listSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type B(BSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Mu(MuSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type T(TSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type L(LSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type S_lik(S_likSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type omega_vec(omega_vecSEXP);
    Rcpp::traits::input_parameter< const arma::Col<int>& >::type batch_vec(batch_vecSEXP);
    Rcpp::traits::input_parameter< const int& >::type ncores(ncoresSEXP);
    rcpp_result_gen = Rcpp::wrap(expect_f(x, inv_Phis_list, B, Lambda, Mu, T, L, S_lik, omega_vec, batch_vec, ncores));
    return rcpp_result_gen;
END_RCPP
}
// expect_gamma
arma::mat expect_gamma(const arma::mat& L, const double& lambda0, const double& lambda1, const arma::vec& p_vec, const int& ncores);
RcppExport SEXP _stadia_expect_gamma(SEXP LSEXP, SEXP lambda0SEXP, SEXP lambda1SEXP, SEXP p_vecSEXP, SEXP ncoresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type L(LSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda0(lambda0SEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda1(lambda1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type p_vec(p_vecSEXP);
    Rcpp::traits::input_parameter< const int& >::type ncores(ncoresSEXP);
    rcpp_result_gen = Rcpp::wrap(expect_gamma(L, lambda0, lambda1, p_vec, ncores));
    return rcpp_result_gen;
END_RCPP
}
// update_T
arma::mat update_T(const arma::mat& x, const arma::mat& B, const arma::mat& L, const arma::cube& Efft_li, const arma::mat& Ef_li, const arma::Col<int> batch_vec, const double& nu_tau, const int& ncores);
RcppExport SEXP _stadia_update_T(SEXP xSEXP, SEXP BSEXP, SEXP LSEXP, SEXP Efft_liSEXP, SEXP Ef_liSEXP, SEXP batch_vecSEXP, SEXP nu_tauSEXP, SEXP ncoresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type B(BSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type L(LSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Efft_li(Efft_liSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Ef_li(Ef_liSEXP);
    Rcpp::traits::input_parameter< const arma::Col<int> >::type batch_vec(batch_vecSEXP);
    Rcpp::traits::input_parameter< const double& >::type nu_tau(nu_tauSEXP);
    Rcpp::traits::input_parameter< const int& >::type ncores(ncoresSEXP);
    rcpp_result_gen = Rcpp::wrap(update_T(x, B, L, Efft_li, Ef_li, batch_vec, nu_tau, ncores));
    return rcpp_result_gen;
END_RCPP
}
// update_B
arma::mat update_B(const arma::mat& x, const arma::mat& T, const arma::mat& L, const arma::mat& Ef_li, const arma::Col<int>& batch_vec, const arma::uword& n_b, const int& ncores);
RcppExport SEXP _stadia_update_B(SEXP xSEXP, SEXP TSEXP, SEXP LSEXP, SEXP Ef_liSEXP, SEXP batch_vecSEXP, SEXP n_bSEXP, SEXP ncoresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type T(TSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type L(LSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Ef_li(Ef_liSEXP);
    Rcpp::traits::input_parameter< const arma::Col<int>& >::type batch_vec(batch_vecSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type n_b(n_bSEXP);
    Rcpp::traits::input_parameter< const int& >::type ncores(ncoresSEXP);
    rcpp_result_gen = Rcpp::wrap(update_B(x, T, L, Ef_li, batch_vec, n_b, ncores));
    return rcpp_result_gen;
END_RCPP
}
// update_mu
arma::mat update_mu(const arma::mat& S_lik, const arma::mat& Lambda, const arma::vec& mu_mu, const arma::mat& sigma_mu, const arma::mat& Ef_k, const arma::vec& omega_vec, const int& ncores);
RcppExport SEXP _stadia_update_mu(SEXP S_likSEXP, SEXP LambdaSEXP, SEXP mu_muSEXP, SEXP sigma_muSEXP, SEXP Ef_kSEXP, SEXP omega_vecSEXP, SEXP ncoresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type S_lik(S_likSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu_mu(mu_muSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma_mu(sigma_muSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Ef_k(Ef_kSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type omega_vec(omega_vecSEXP);
    Rcpp::traits::input_parameter< const int& >::type ncores(ncoresSEXP);
    rcpp_result_gen = Rcpp::wrap(update_mu(S_lik, Lambda, mu_mu, sigma_mu, Ef_k, omega_vec, ncores));
    return rcpp_result_gen;
END_RCPP
}
// update_omega
arma::vec update_omega(const arma::mat& S_lik, const arma::mat& Mu, const arma::mat& Lambda, const arma::cube& Efft_li, const arma::cube& weightEf_liks, const double& nu_omega, const int& ncores);
RcppExport SEXP _stadia_update_omega(SEXP S_likSEXP, SEXP MuSEXP, SEXP LambdaSEXP, SEXP Efft_liSEXP, SEXP weightEf_liksSEXP, SEXP nu_omegaSEXP, SEXP ncoresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type S_lik(S_likSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Mu(MuSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Efft_li(Efft_liSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type weightEf_liks(weightEf_liksSEXP);
    Rcpp::traits::input_parameter< const double& >::type nu_omega(nu_omegaSEXP);
    Rcpp::traits::input_parameter< const int& >::type ncores(ncoresSEXP);
    rcpp_result_gen = Rcpp::wrap(update_omega(S_lik, Mu, Lambda, Efft_li, weightEf_liks, nu_omega, ncores));
    return rcpp_result_gen;
END_RCPP
}
// update_Lambda
arma::mat update_Lambda(const arma::cube& Efft_li, const arma::mat& muEf, const arma::vec& omega_vec, const arma::mat& S_lik, const arma::mat& Mu, const int& n_Lambda, const arma::mat& Sigma_Lambda, const int& ncores);
RcppExport SEXP _stadia_update_Lambda(SEXP Efft_liSEXP, SEXP muEfSEXP, SEXP omega_vecSEXP, SEXP S_likSEXP, SEXP MuSEXP, SEXP n_LambdaSEXP, SEXP Sigma_LambdaSEXP, SEXP ncoresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type Efft_li(Efft_liSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type muEf(muEfSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type omega_vec(omega_vecSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type S_lik(S_likSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Mu(MuSEXP);
    Rcpp::traits::input_parameter< const int& >::type n_Lambda(n_LambdaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Sigma_Lambda(Sigma_LambdaSEXP);
    Rcpp::traits::input_parameter< const int& >::type ncores(ncoresSEXP);
    rcpp_result_gen = Rcpp::wrap(update_Lambda(Efft_li, muEf, omega_vec, S_lik, Mu, n_Lambda, Sigma_Lambda, ncores));
    return rcpp_result_gen;
END_RCPP
}
// update_p
arma::vec update_p(const arma::mat& Egamma, const double& alpha_p, const double& beta_p, const int& ncores);
RcppExport SEXP _stadia_update_p(SEXP EgammaSEXP, SEXP alpha_pSEXP, SEXP beta_pSEXP, SEXP ncoresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Egamma(EgammaSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha_p(alpha_pSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta_p(beta_pSEXP);
    Rcpp::traits::input_parameter< const int& >::type ncores(ncoresSEXP);
    rcpp_result_gen = Rcpp::wrap(update_p(Egamma, alpha_p, beta_p, ncores));
    return rcpp_result_gen;
END_RCPP
}
// update_L
arma::mat update_L(const arma::mat& x, const arma::mat& B, const arma::mat& Egamma, const arma::Col<int>& batch_vec, const arma::mat& Ef_li, const arma::cube& Efft_li, const arma::mat& T, const arma::mat& L, const double& lambda0, const double& lambda1, const int& ncores);
RcppExport SEXP _stadia_update_L(SEXP xSEXP, SEXP BSEXP, SEXP EgammaSEXP, SEXP batch_vecSEXP, SEXP Ef_liSEXP, SEXP Efft_liSEXP, SEXP TSEXP, SEXP LSEXP, SEXP lambda0SEXP, SEXP lambda1SEXP, SEXP ncoresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type B(BSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Egamma(EgammaSEXP);
    Rcpp::traits::input_parameter< const arma::Col<int>& >::type batch_vec(batch_vecSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Ef_li(Ef_liSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Efft_li(Efft_liSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type T(TSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type L(LSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda0(lambda0SEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda1(lambda1SEXP);
    Rcpp::traits::input_parameter< const int& >::type ncores(ncoresSEXP);
    rcpp_result_gen = Rcpp::wrap(update_L(x, B, Egamma, batch_vec, Ef_li, Efft_li, T, L, lambda0, lambda1, ncores));
    return rcpp_result_gen;
END_RCPP
}
// logPrior_L
double logPrior_L(const arma::mat& L, const arma::vec& p_vec, const double& lambda0, const double& lambda1);
RcppExport SEXP _stadia_logPrior_L(SEXP LSEXP, SEXP p_vecSEXP, SEXP lambda0SEXP, SEXP lambda1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type L(LSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type p_vec(p_vecSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda0(lambda0SEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda1(lambda1SEXP);
    rcpp_result_gen = Rcpp::wrap(logPrior_L(L, p_vec, lambda0, lambda1));
    return rcpp_result_gen;
END_RCPP
}
// logPrior_B
double logPrior_B(const arma::mat& B);
RcppExport SEXP _stadia_logPrior_B(SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(logPrior_B(B));
    return rcpp_result_gen;
END_RCPP
}
// logPrior_mu
double logPrior_mu(const arma::mat& mu, const arma::vec& mu_mu, const arma::mat& Sigma_mu);
RcppExport SEXP _stadia_logPrior_mu(SEXP muSEXP, SEXP mu_muSEXP, SEXP Sigma_muSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu_mu(mu_muSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Sigma_mu(Sigma_muSEXP);
    rcpp_result_gen = Rcpp::wrap(logPrior_mu(mu, mu_mu, Sigma_mu));
    return rcpp_result_gen;
END_RCPP
}
// logPrior_omega
double logPrior_omega(const arma::vec& omega_vec, const double& nu_omega);
RcppExport SEXP _stadia_logPrior_omega(SEXP omega_vecSEXP, SEXP nu_omegaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type omega_vec(omega_vecSEXP);
    Rcpp::traits::input_parameter< const double& >::type nu_omega(nu_omegaSEXP);
    rcpp_result_gen = Rcpp::wrap(logPrior_omega(omega_vec, nu_omega));
    return rcpp_result_gen;
END_RCPP
}
// logPrior_T
double logPrior_T(const arma::mat& T, const double& nu_tau);
RcppExport SEXP _stadia_logPrior_T(SEXP TSEXP, SEXP nu_tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type T(TSEXP);
    Rcpp::traits::input_parameter< const double& >::type nu_tau(nu_tauSEXP);
    rcpp_result_gen = Rcpp::wrap(logPrior_T(T, nu_tau));
    return rcpp_result_gen;
END_RCPP
}
// logPrior_Lambda
double logPrior_Lambda(const arma::mat& Lambda, const int& n_Lambda, const arma::mat& Sigma_Lambda);
RcppExport SEXP _stadia_logPrior_Lambda(SEXP LambdaSEXP, SEXP n_LambdaSEXP, SEXP Sigma_LambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< const int& >::type n_Lambda(n_LambdaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Sigma_Lambda(Sigma_LambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(logPrior_Lambda(Lambda, n_Lambda, Sigma_Lambda));
    return rcpp_result_gen;
END_RCPP
}
// logPrior_p
double logPrior_p(const arma::vec& p_vec, const double& alpha_p, const double& beta_p);
RcppExport SEXP _stadia_logPrior_p(SEXP p_vecSEXP, SEXP alpha_pSEXP, SEXP beta_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type p_vec(p_vecSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha_p(alpha_pSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta_p(beta_pSEXP);
    rcpp_result_gen = Rcpp::wrap(logPrior_p(p_vec, alpha_p, beta_p));
    return rcpp_result_gen;
END_RCPP
}
// logPost
double logPost(const double& loglik, const arma::mat& L, const arma::mat& B, const arma::mat& mu, const arma::vec& p_vec, const arma::vec& omega_vec, const arma::mat& T, const arma::mat& Lambda, const double& lambda0, const double& lambda1, const arma::vec& mu_mu, const arma::mat& Sigma_mu, const double& nu_omega, const double& nu_tau, const int& n_Lambda, const arma::mat& Sigma_Lambda, const double& alpha_p, const double& beta_p);
RcppExport SEXP _stadia_logPost(SEXP loglikSEXP, SEXP LSEXP, SEXP BSEXP, SEXP muSEXP, SEXP p_vecSEXP, SEXP omega_vecSEXP, SEXP TSEXP, SEXP LambdaSEXP, SEXP lambda0SEXP, SEXP lambda1SEXP, SEXP mu_muSEXP, SEXP Sigma_muSEXP, SEXP nu_omegaSEXP, SEXP nu_tauSEXP, SEXP n_LambdaSEXP, SEXP Sigma_LambdaSEXP, SEXP alpha_pSEXP, SEXP beta_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type loglik(loglikSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type L(LSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type B(BSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type p_vec(p_vecSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type omega_vec(omega_vecSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type T(TSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda0(lambda0SEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda1(lambda1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu_mu(mu_muSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Sigma_mu(Sigma_muSEXP);
    Rcpp::traits::input_parameter< const double& >::type nu_omega(nu_omegaSEXP);
    Rcpp::traits::input_parameter< const double& >::type nu_tau(nu_tauSEXP);
    Rcpp::traits::input_parameter< const int& >::type n_Lambda(n_LambdaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Sigma_Lambda(Sigma_LambdaSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha_p(alpha_pSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta_p(beta_pSEXP);
    rcpp_result_gen = Rcpp::wrap(logPost(loglik, L, B, mu, p_vec, omega_vec, T, Lambda, lambda0, lambda1, mu_mu, Sigma_mu, nu_omega, nu_tau, n_Lambda, Sigma_Lambda, alpha_p, beta_p));
    return rcpp_result_gen;
END_RCPP
}
// calPhi
Rcpp::List calPhi(const arma::mat& T, const arma::mat& L, const arma::mat& Lambda, const arma::vec& omega_vec, const arma::Col<int>& batch_vec);
RcppExport SEXP _stadia_calPhi(SEXP TSEXP, SEXP LSEXP, SEXP LambdaSEXP, SEXP omega_vecSEXP, SEXP batch_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type T(TSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type L(LSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type omega_vec(omega_vecSEXP);
    Rcpp::traits::input_parameter< const arma::Col<int>& >::type batch_vec(batch_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(calPhi(T, L, Lambda, omega_vec, batch_vec));
    return rcpp_result_gen;
END_RCPP
}
// calEnergy_latent
arma::mat calEnergy_latent(const arma::sp_mat& adj_mat, const arma::Col<int>& c_vec, const int& K, const arma::vec& eta_vec, const arma::Col<int>& batch_vec);
RcppExport SEXP _stadia_calEnergy_latent(SEXP adj_matSEXP, SEXP c_vecSEXP, SEXP KSEXP, SEXP eta_vecSEXP, SEXP batch_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type adj_mat(adj_matSEXP);
    Rcpp::traits::input_parameter< const arma::Col<int>& >::type c_vec(c_vecSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eta_vec(eta_vecSEXP);
    Rcpp::traits::input_parameter< const arma::Col<int>& >::type batch_vec(batch_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(calEnergy_latent(adj_mat, c_vec, K, eta_vec, batch_vec));
    return rcpp_result_gen;
END_RCPP
}
// calEnergy_observed
Rcpp::List calEnergy_observed(const arma::mat& x, const arma::mat& B, const arma::mat& L, const arma::mat& Mu, const arma::mat& T, const arma::mat& Lambda, const arma::Col<int>& batch_vec, const arma::vec& omega_vec, const int& ncores);
RcppExport SEXP _stadia_calEnergy_observed(SEXP xSEXP, SEXP BSEXP, SEXP LSEXP, SEXP MuSEXP, SEXP TSEXP, SEXP LambdaSEXP, SEXP batch_vecSEXP, SEXP omega_vecSEXP, SEXP ncoresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type B(BSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type L(LSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Mu(MuSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type T(TSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< const arma::Col<int>& >::type batch_vec(batch_vecSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type omega_vec(omega_vecSEXP);
    Rcpp::traits::input_parameter< const int& >::type ncores(ncoresSEXP);
    rcpp_result_gen = Rcpp::wrap(calEnergy_observed(x, B, L, Mu, T, Lambda, batch_vec, omega_vec, ncores));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_stadia_stadia_EM_SP", (DL_FUNC) &_stadia_stadia_EM_SP, 15},
    {"_stadia_calAdjacent", (DL_FUNC) &_stadia_calAdjacent, 5},
    {"_stadia_convertSparse", (DL_FUNC) &_stadia_convertSparse, 1},
    {"_stadia_update_c_sp", (DL_FUNC) &_stadia_update_c_sp, 14},
    {"_stadia_update_c_sc", (DL_FUNC) &_stadia_update_c_sc, 10},
    {"_stadia_expect_f", (DL_FUNC) &_stadia_expect_f, 11},
    {"_stadia_expect_gamma", (DL_FUNC) &_stadia_expect_gamma, 5},
    {"_stadia_update_T", (DL_FUNC) &_stadia_update_T, 8},
    {"_stadia_update_B", (DL_FUNC) &_stadia_update_B, 7},
    {"_stadia_update_mu", (DL_FUNC) &_stadia_update_mu, 7},
    {"_stadia_update_omega", (DL_FUNC) &_stadia_update_omega, 7},
    {"_stadia_update_Lambda", (DL_FUNC) &_stadia_update_Lambda, 8},
    {"_stadia_update_p", (DL_FUNC) &_stadia_update_p, 4},
    {"_stadia_update_L", (DL_FUNC) &_stadia_update_L, 11},
    {"_stadia_logPrior_L", (DL_FUNC) &_stadia_logPrior_L, 4},
    {"_stadia_logPrior_B", (DL_FUNC) &_stadia_logPrior_B, 1},
    {"_stadia_logPrior_mu", (DL_FUNC) &_stadia_logPrior_mu, 3},
    {"_stadia_logPrior_omega", (DL_FUNC) &_stadia_logPrior_omega, 2},
    {"_stadia_logPrior_T", (DL_FUNC) &_stadia_logPrior_T, 2},
    {"_stadia_logPrior_Lambda", (DL_FUNC) &_stadia_logPrior_Lambda, 3},
    {"_stadia_logPrior_p", (DL_FUNC) &_stadia_logPrior_p, 3},
    {"_stadia_logPost", (DL_FUNC) &_stadia_logPost, 18},
    {"_stadia_calPhi", (DL_FUNC) &_stadia_calPhi, 5},
    {"_stadia_calEnergy_latent", (DL_FUNC) &_stadia_calEnergy_latent, 5},
    {"_stadia_calEnergy_observed", (DL_FUNC) &_stadia_calEnergy_observed, 9},
    {NULL, NULL, 0}
};

RcppExport void R_init_stadia(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
